import { scaleOrdinal } from 'd3-scale';
import { schemePaired } from 'd3-scale-chromatic';
import tinyColor from 'tinycolor2';

const colorStr2Hex = str => isNaN(str) ? parseInt(tinyColor(str).toHex(), 16) : str;
const colorAlpha = str => isNaN(str) ? tinyColor(str).getAlpha() : 1;

const autoColorScale = scaleOrdinal(schemePaired);

// Autoset attribute colorField by colorByAccessor property
// If an object has already a color, don't set it
// Objects can be nodes or links
function autoColorObjects(objects, colorByAccessor, colorField) {
  if (!colorByAccessor || typeof colorField !== 'string') return;

  objects.filter(obj => !obj[colorField]).forEach(obj => {
    obj[colorField] = "#ff0000";//autoColorScale(colorByAccessor(obj));
  });
}

//==================== add-begin:190620 ====================
// 根据类型设置节点颜色
function typeColorObjects(objects, mapTypeColor, colorField) {
  if (typeof colorField !== 'string') return;
  objects.filter(obj => !obj[colorField]).forEach(obj => {
    var color = mapTypeColor[obj['type']];
    if (color) obj[colorField] = color;
  });
}
//===================== add-end:190620 =====================

export { typeColorObjects, autoColorObjects, colorStr2Hex, colorAlpha };
